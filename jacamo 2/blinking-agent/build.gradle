/*
   Project multi-agent-system

   Gradle build file for JaCaMo Applications
   novembre 25, 2022 - 11:08:39
*/

defaultTasks 'run'

apply plugin: 'java'
apply plugin: 'eclipse'

version '1.0'
group   'org.jacamo'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(15)
    }
}

repositories {
    mavenCentral()
    maven { url "https://raw.githubusercontent.com/jacamo-lang/mvn-repo/master" }
    maven { url "https://repo.gradle.org/gradle/libs-releases" }

    //maven { url "http://jacamo.sourceforge.net/maven2" }
    //maven { url "https://jade.tilab.com/maven/" }

    flatDir { dirs 'lib' }
}

dependencies {
    implementation('org.jacamo:jacamo:1.1')
    implementation group: 'io.vertx', name: 'vertx-core', version: '3.7.1'

    implementation('org.apache.jena:apache-jena-libs:4.5.0')
    implementation ('org.slf4j:slf4j-simple:1.7.9')
    implementation('org.apache.jena:jena-arq:4.4.0')
}

sourceSets {
    main {
        java {
            srcDir 'src/env'
            srcDir 'src/agt'
            srcDir 'src/org'
            srcDir 'src/int'
            srcDir 'src/java'
        }
        resources {
            srcDir 'src/resources'
        }
    }
}

task run (type: JavaExec, dependsOn: 'classes') {
    group       ' JaCaMo'
    description 'runs the JaCaMo application'
    doFirst {
        mkdir 'log'
    }
    main 'jacamo.infra.JaCaMoLauncher'
    args 'multi-agent-system.jcm'
    // jvmArgs '-Xss15m'
    classpath sourceSets.main.runtimeClasspath
}

task uberJar(type: Jar, dependsOn: 'classes') {
    group      ' JaCaMo'
    description 'creates a single runnable jar file with all dependencies'
    duplicatesStrategy 'exclude'

    manifest {
        attributes 'Main-Class': 'jacamo.infra.JaCaMoLauncher'
    }
    archiveBaseName = 'jacamo-multi-agent-system' // the name must start with jacamo so that jacamo...jar is found in the classpath
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from (project.projectDir.absolutePath) {
        include '**/*.asl'
        include '**/*.xml'
        include '**/*.sai'
        include '**/*.ptl'
        include '**/*.jcm'
        include '*.properties'
    }
    from (project.buildDir.absolutePath + '/jcm') {
        include '**/*'
    }
    with jar

    doFirst {
        copy {
            from 'multi-agent-system.jcm'
            rename 'multi-agent-system.jcm','default.jcm'
            into project.buildDir.absolutePath + '/jcm'
        }
    }
}

clean {
    delete 'bin'
    delete 'build'
    delete 'log'
}
